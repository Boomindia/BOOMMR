generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  firebaseUid String   @unique
  phoneNumber String   @unique
  name        String
  username    String   @unique
  email       String?  @unique
  avatar      String?
  bio         String?
  website     String?
  location    String?
  isVerified  Boolean  @default(false)
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations (only PostgreSQL relations)
  ownedCommunities Community[]
  communityMembers CommunityMember[]
  videos           Video[]

  @@map("users")
}

model Video {
  id           String      @id @default(cuid())
  title        String
  description  String?
  videoUrl     String?
  videoUrls    Json?       // Multiple quality URLs
  thumbnailUrl String?
  duration     Float?
  metadata     Json?
  visibility   Visibility  @default(PUBLIC)
  price        Float?
  tags         String[]
  hashtags     String[]
  seriesId     String?
  episodeNumber Int?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  // Relations
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String?

  @@map("videos")
}

model Community {
  id          String    @id @default(cuid())
  name        String
  description String?
  avatar      String?
  banner      String?
  isPrivate   Boolean   @default(false)
  rules       String[]
  tags        String[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  ownerId String
  owner   User              @relation(fields: [ownerId], references: [id])
  members CommunityMember[]

  @@map("communities")
}

model CommunityMember {
  id        String          @id @default(cuid())
  role      CommunityRole   @default(MEMBER)
  joinedAt  DateTime        @default(now())

  // Relations
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  communityId String
  community   Community @relation(fields: [communityId], references: [id], onDelete: Cascade)

  @@unique([userId, communityId])
  @@map("community_members")
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum CommunityRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
}
